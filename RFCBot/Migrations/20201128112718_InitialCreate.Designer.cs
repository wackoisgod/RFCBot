// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RFCBot;

namespace RFCBot.Migrations
{
    [DbContext(typeof(RFCContext))]
    [Migration("20201128112718_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.HasSequence("rfcnext");

            modelBuilder.Entity("RFCBot.GithubUser", b =>
                {
                    b.Property<int>("GithubUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Login")
                        .HasColumnType("varchar(200)");

                    b.HasKey("GithubUserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RFCBot.Githubsync", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("RanAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Successful")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("GithubSync");
                });

            modelBuilder.Entity("RFCBot.Issue", b =>
                {
                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<long>("Repository")
                        .HasColumnType("bigint");

                    b.Property<int?>("Assignee")
                        .HasColumnType("integer");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPullRequest")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("Labels")
                        .HasColumnType("text[]");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean");

                    b.Property<bool>("Open")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("User")
                        .HasColumnType("integer");

                    b.HasKey("Number", "Repository");

                    b.HasIndex("Assignee");

                    b.HasIndex("User");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("RFCBot.Issuecomment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IssueNumber")
                        .HasColumnType("integer");

                    b.Property<long>("IssueRepository")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("User")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("User");

                    b.HasIndex("IssueNumber", "IssueRepository");

                    b.ToTable("IssueComments");
                });

            modelBuilder.Entity("RFCBot.PullRequest", b =>
                {
                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<long>("Repository")
                        .HasColumnType("bigint");

                    b.Property<int>("Additions")
                        .HasColumnType("integer");

                    b.Property<int?>("Assignee")
                        .HasColumnType("integer");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<int>("ChangedFiles")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Commits")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Deletions")
                        .HasColumnType("integer");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("MergedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Number", "Repository");

                    b.HasIndex("Assignee");

                    b.ToTable("PullRequests");
                });

            modelBuilder.Entity("RFCBot.RFCConcern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("InitiatingComment")
                        .HasColumnType("integer");

                    b.Property<int>("Initiator")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Proposal")
                        .HasColumnType("integer");

                    b.Property<int?>("ResolvedComment")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InitiatingComment");

                    b.HasIndex("Initiator");

                    b.HasIndex("Proposal");

                    b.HasIndex("ResolvedComment");

                    b.ToTable("Concerns");
                });

            modelBuilder.Entity("RFCBot.RFCFeedbackRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("FeedbackComment")
                        .HasColumnType("integer");

                    b.Property<int>("Initiator")
                        .HasColumnType("integer");

                    b.Property<int>("IssueNumber")
                        .HasColumnType("integer");

                    b.Property<long>("IssueRepository")
                        .HasColumnType("bigint");

                    b.Property<int>("Requested")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackComment");

                    b.HasIndex("Initiator");

                    b.HasIndex("Requested");

                    b.HasIndex("IssueNumber", "IssueRepository");

                    b.ToTable("FeedbackRequests");
                });

            modelBuilder.Entity("RFCBot.RFCProposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("BotTrackingComment")
                        .HasColumnType("integer");

                    b.Property<bool>("Closed")
                        .HasColumnType("boolean");

                    b.Property<string>("Disposition")
                        .HasColumnType("text");

                    b.Property<int>("InitiatingComment")
                        .HasColumnType("integer");

                    b.Property<int>("Initiator")
                        .HasColumnType("integer");

                    b.Property<int>("IssueNumber")
                        .HasColumnType("integer");

                    b.Property<long>("IssueRepository")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BotTrackingComment");

                    b.HasIndex("InitiatingComment");

                    b.HasIndex("IssueNumber", "IssueRepository");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("RFCBot.RFCReviewRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Proposal")
                        .HasColumnType("integer");

                    b.Property<bool>("Reviewed")
                        .HasColumnType("boolean");

                    b.Property<int>("Reviewer")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Proposal");

                    b.HasIndex("Reviewer");

                    b.ToTable("ReviewRequests");
                });

            modelBuilder.Entity("RFCBot.Issue", b =>
                {
                    b.HasOne("RFCBot.GithubUser", null)
                        .WithMany()
                        .HasForeignKey("Assignee");

                    b.HasOne("RFCBot.GithubUser", null)
                        .WithMany()
                        .HasForeignKey("User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RFCBot.Issuecomment", b =>
                {
                    b.HasOne("RFCBot.GithubUser", null)
                        .WithMany()
                        .HasForeignKey("User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RFCBot.Issue", null)
                        .WithMany()
                        .HasForeignKey("IssueNumber", "IssueRepository")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RFCBot.PullRequest", b =>
                {
                    b.HasOne("RFCBot.GithubUser", null)
                        .WithMany()
                        .HasForeignKey("Assignee");
                });

            modelBuilder.Entity("RFCBot.RFCConcern", b =>
                {
                    b.HasOne("RFCBot.Issuecomment", null)
                        .WithMany()
                        .HasForeignKey("InitiatingComment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RFCBot.GithubUser", null)
                        .WithMany()
                        .HasForeignKey("Initiator")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RFCBot.RFCProposal", null)
                        .WithMany()
                        .HasForeignKey("Proposal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RFCBot.Issuecomment", null)
                        .WithMany()
                        .HasForeignKey("ResolvedComment");
                });

            modelBuilder.Entity("RFCBot.RFCFeedbackRequest", b =>
                {
                    b.HasOne("RFCBot.Issuecomment", null)
                        .WithMany()
                        .HasForeignKey("FeedbackComment");

                    b.HasOne("RFCBot.GithubUser", null)
                        .WithMany()
                        .HasForeignKey("Initiator")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RFCBot.GithubUser", null)
                        .WithMany()
                        .HasForeignKey("Requested")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RFCBot.Issue", null)
                        .WithMany()
                        .HasForeignKey("IssueNumber", "IssueRepository")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RFCBot.RFCProposal", b =>
                {
                    b.HasOne("RFCBot.Issuecomment", null)
                        .WithMany()
                        .HasForeignKey("BotTrackingComment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RFCBot.Issuecomment", null)
                        .WithMany()
                        .HasForeignKey("InitiatingComment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RFCBot.Issue", null)
                        .WithMany()
                        .HasForeignKey("IssueNumber", "IssueRepository")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RFCBot.RFCReviewRequest", b =>
                {
                    b.HasOne("RFCBot.RFCProposal", null)
                        .WithMany()
                        .HasForeignKey("Proposal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RFCBot.GithubUser", null)
                        .WithMany()
                        .HasForeignKey("Reviewer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
